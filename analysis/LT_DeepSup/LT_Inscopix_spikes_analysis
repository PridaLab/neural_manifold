#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 23 17:18:11 2022

@author: julio
"""

import numpy as np
import matplotlib.pyplot as plt
#import pickle
import copy
import umap

from neural_manifold import general_utils as gu
from neural_manifold import structure_index as sI 



#%% Spikes study
signal_order = ['SNR0_1', 'SNR0_5','SNR1', 'SNR1_5', 'SNR2', 'SNR3', 'SNR5','traces']
signal_fields = ['rates_SNR0_1','rates_SNR0_5','rates_SNR1','rates_SNR1_5', 'rates_SNR2', 'rates_SNR3', 'rates_SNR5', 'Inscopix_traces']
label_order = ['pos-x', 'pos-y']
#model GC3 embeddings
save_dir = '/media/julio/DATOS/spatial_navigation/JP_data/LT_inscopix/Spikes_study/GC3'
GC3_dict = gu.load_files(save_dir, '*_PyalData_struct.mat', verbose=False, struct_type = "PyalData")
GC3_dict = gu.apply_to_dict(gu.add_firing_rates, GC3_dict, 'smooth', std=0.4, num_bins = 20, assymetry = True, continuous = True)
GC3_dict = gu.apply_to_dict(gu.select_trials, GC3_dict, "dir == ['L', 'R']")

fnames = list(GC3_dict.keys())
sI_dict = dict()
X_emb_dict = dict()
X_base_dict = dict()
label_signal_dict = dict()
label_limits_dict = dict()
for f_idx, fname in enumerate(fnames):
    print(fname)
    pos = copy.deepcopy(np.concatenate(GC3_dict[fname]["pos"].values, axis= 0))
    pos_x = copy.deepcopy(pos[:,0]).reshape(-1,1)
    pos_y = copy.deepcopy(pos[:,1]).reshape(-1,1)
    label_list = list([pos_x, pos_y])
    label_limits = [(np.percentile(label,5), np.percentile(label,95)) for label in label_list]
    
    X_base = list()
    for signal in signal_fields:
        X_base.append(copy.deepcopy(np.concatenate(GC3_dict[fname][signal].values, axis=0)))
    X_emb = list()
    #n_perc = [0.01, 0.01,0.01,0.01, 0.1]
    for base_idx, base in enumerate(X_base):
        #n_neighbours = np.round(X_base[0].shape[0]*n_perc[base_idx]).astype(int)
        n_neighbours = 50
        model = umap.UMAP(n_neighbors = n_neighbours, n_components =3, min_dist=0.75)
        X_emb.append(model.fit_transform(base))
    
    X_base_dict[fname] = X_base
    X_emb_dict[fname] = X_emb
    label_signal_dict[fname] = label_list
    label_limits_dict[fname] = label_limits
    
#model GC1 embeddings
save_dir = '/media/julio/DATOS/spatial_navigation/JP_data/LT_inscopix/Spikes_study/GC1'
GC1_dict = gu.load_files(save_dir, '*_PyalData_struct.mat', verbose=False, struct_type = "PyalData")
GC1_dict = gu.apply_to_dict(gu.add_firing_rates, GC1_dict, 'smooth', std=0.4, num_bins = 20, assymetry = True, continuous = True)
GC1_dict = gu.apply_to_dict(gu.select_trials, GC1_dict, "dir == ['L', 'R']")
fnames = list(GC1_dict.keys())
for f_idx, fname in enumerate(fnames):
    print(fname)
    pos = copy.deepcopy(np.concatenate(GC1_dict[fname]["pos"].values, axis= 0))
    pos_x = copy.deepcopy(pos[:,0]).reshape(-1,1)
    pos_y = copy.deepcopy(pos[:,1]).reshape(-1,1)
    label_list = list([pos_x, pos_y])
    label_limits = [(np.percentile(label,5), np.percentile(label,95)) for label in label_list]
    
    X_base = list()
    X_base.append(copy.deepcopy(np.concatenate(GC3_dict[fname]["Inscopix_SNR0_5_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(GC1_dict[fname]["Inscopix_SNR1_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(GC1_dict[fname]["Inscopix_SNR1_5_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(GC1_dict[fname]["Inscopix_SNR2_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(GC1_dict[fname]["Inscopix_SNR3_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(GC1_dict[fname]["Inscopix_traces"].values, axis=0)))
    
    X_emb = list()
    #n_perc = [0.01, 0.01,0.01,0.01, 0.1]
    for base_idx, base in enumerate(X_base):
        #n_neighbours = np.round(X_base[0].shape[0]*n_perc[base_idx]).astype(int)
        n_neighbours = 50
        model = umap.UMAP(n_neighbors = n_neighbours, n_components =3, min_dist=0.75)
        X_emb.append(model.fit_transform(base))
    
    X_base_dict[fname] = X_base
    X_emb_dict[fname] = X_emb
    label_signal_dict[fname] = label_list
    label_limits_dict[fname] = label_limits

#model CZ3 embeddings
save_dir = '/media/julio/DATOS/spatial_navigation/JP_data/LT_inscopix/Spikes_study/CZ3'
CZ3_dict = gu.load_files(save_dir, '*_PyalData_struct.mat', verbose=False, struct_type = "PyalData")
CZ3_dict = gu.apply_to_dict(gu.add_firing_rates, CZ3_dict, 'smooth', std=0.4, num_bins = 20, assymetry = True, continuous = True)
CZ3_dict = gu.apply_to_dict(gu.select_trials, CZ3_dict, "dir == ['L', 'R']")
fnames = list(CZ3_dict.keys())
for f_idx, fname in enumerate(fnames):
    print(fname)
    pos = copy.deepcopy(np.concatenate(CZ3_dict[fname]["pos"].values, axis= 0))
    pos_x = copy.deepcopy(pos[:,0]).reshape(-1,1)
    pos_y = copy.deepcopy(pos[:,1]).reshape(-1,1)
    label_list = list([pos_x, pos_y])
    label_limits = [(np.percentile(label,5), np.percentile(label,95)) for label in label_list]
    
    X_base = list()
    X_base.append(copy.deepcopy(np.concatenate(CZ3_dict[fname]["Inscopix_SNR0_5_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(CZ3_dict[fname]["Inscopix_SNR1_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(CZ3_dict[fname]["Inscopix_SNR1_5_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(CZ3_dict[fname]["Inscopix_SNR2_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(CZ3_dict[fname]["Inscopix_SNR3_rates"].values, axis=0)))
    X_base.append(copy.deepcopy(np.concatenate(CZ3_dict[fname]["Inscopix_traces"].values, axis=0)))
    
    X_emb = list()
    #n_perc = [0.01, 0.01,0.01,0.01, 0.1]
    for base_idx, base in enumerate(X_base):
        #n_neighbours = np.round(X_base[0].shape[0]*n_perc[base_idx]).astype(int)
        n_neighbours = 50
        model = umap.UMAP(n_neighbors = n_neighbours, n_components =3, min_dist=0.75)
        X_emb.append(model.fit_transform(base))
    
    X_base_dict[fname] = X_base
    X_emb_dict[fname] = X_emb
    label_signal_dict[fname] = label_list
    label_limits_dict[fname] = label_limits
    
    
#compute structure index for all
fnames = list(X_emb_dict.keys())
nn_to_check = [3,5,10,20,50,100]
emb_space = np.linspace(0,2,3).astype(int)
sI_dict = dict()
for f_idx, fname in enumerate(fnames):
    print(fname)
    emb_list = copy.deepcopy(X_emb_dict[fname]) 
    base_list = copy.deepcopy(X_base_dict[fname])
    label_list = copy.deepcopy(label_signal_dict[fname])
    label_limits = copy.deepcopy(label_limits_dict[fname])
    
    sI_array = np.zeros((len(emb_list),2,2,len(nn_to_check)))*np.nan
    for label_idx in range(len(label_list)):
        print('\t',label_order[label_idx])
        label_signal = label_list[label_idx][:,0]
        minVal, maxVal = label_limits[label_idx]
        for emb_idx, emb_signal in enumerate(emb_list):
            print('\t\t', signal_order[emb_idx])
            base_signal = base_list[emb_idx]
            base_space = np.linspace(0, base_signal.shape[1]-1, base_signal.shape[1]).astype(int)
            for nn_idx, nn in enumerate(nn_to_check):
                sI_array[emb_idx, 0, label_idx, nn_idx],_,_ = sI.compute_structure_index(base_signal, label_signal, 20, base_space,
                                                           0, vmin= minVal, vmax = maxVal, nn= nn)
                
                sI_array[emb_idx, 1, label_idx, nn_idx],_,_ = sI.compute_structure_index(emb_signal, label_signal, 20, emb_space,
                                                           0, vmin= minVal, vmax = maxVal, nn= nn)
    sI_dict[fname] = sI_array

#plot embeddings for visual inspection
fnames = list(X_emb_dict.keys())

for label_idx in range(len(label_order)):
    fig = plt.figure(figsize = (12,10))   
    for f_idx, fname in enumerate(fnames):
        emb_list = copy.deepcopy(X_emb_dict[fname])
        label_signal = label_signal_dict[fname][label_idx][:,0]
        minVal, maxVal = label_limits_dict[fname][label_idx]
        
        for emb_idx, emb in enumerate(emb_list):
            ax = plt.subplot(len(fnames),len(signal_order),emb_idx+1+f_idx*len(emb_list), projection='3d')
            p = ax.scatter(*emb.T, c=label_signal, cmap = plt.cm.magma, vmin = minVal, vmax = maxVal)
            if f_idx==0:
                ax.set_title(f"{fname}: {signal_order[emb_idx]}")
            else:
                ax.set_title(fname)
            ax.set_xticks([])
            ax.set_yticks([])
            ax.set_zticks([])
            ax.set_xlabel('Dim 1', labelpad= -8)
            ax.set_ylabel('Dim 2', labelpad= -8)
            ax.set_zlabel('Dim 3', labelpad= -8)
            if emb_idx == len(emb_list)-1:
                cbar = fig.colorbar(p, ax=ax,fraction=0.046, pad=0.08)
                cbar.ax.get_yaxis().labelpad = 8
                cbar.ax.set_ylabel(label_order[label_idx], rotation=-270, size=15)
        plt.tight_layout()
    
#plot structure index as a function of # of nn
for label_idx in range(len(label_order)):
    fig, ax = plt.subplots(figsize = (6, 4),ncols = 3, nrows = 2)
    session_color = ['C0','C1','C2','C3']
    for nn_idx, nn in enumerate(nn_to_check):
        row = nn_idx//3
        col = nn_idx%3
        for f_idx, fname in enumerate(fnames):
            ax[row,col].plot(sI_dict[fname][:,0,label_idx,nn_idx], color = session_color[f_idx], linestyle='--')
            ax[row,col].plot(sI_dict[fname][:,1,label_idx,nn_idx], color = session_color[f_idx], label = fname)
        ax[row,col].set_title(nn)
        ax[row,col].set_xticks(np.linspace(0, len(signal_order)-1,len(signal_order)).astype(int))
        ax[row,col].set_xticklabels(signal_order)
        ax[row,col].set_ylabel(f"Structure Index {label_order[label_idx]}")
plt.legend()


